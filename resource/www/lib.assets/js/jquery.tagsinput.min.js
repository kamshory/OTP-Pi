/*

    jQuery Tags Input Plugin 1.3.3

    Copyright (c) 2011 XOXCO, Inc

    Documentation for this plugin lives here:
    http://xoxco.com/clickable/jquery-tags-input

    Licensed under the MIT license:
    http://www.opensource.org/licenses/mit-license.php

    ben@xoxco.com

*/

!function (t) { var a = new Array, e = new Array; t.fn.doAutosize = function (a) { var e = t(this).data("minwidth"), i = t(this).data("maxwidth"), n = "", u = t(this), d = t("#" + t(this).data("tester_id")); if (n !== (n = u.val())) { var o = n.replace(/&/g, "&amp;").replace(/\s/g, " ").replace(/</g, "&lt;").replace(/>/g, "&gt;"); d.html(o); var r = d.width(), s = r + a.comfortZone >= e ? r + a.comfortZone : e; (s < u.width() && s >= e || s > e && s < i) && u.width(s) } }, t.fn.resetAutosize = function (a) { var e = t(this).data("minwidth") || a.minInputWidth || t(this).width(), i = t(this).data("maxwidth") || a.maxInputWidth || t(this).closest(".tagsinput").width() - a.inputPadding, n = t(this), u = t("<tester/>").css({ position: "absolute", top: -9999, left: -9999, width: "auto", fontSize: n.css("fontSize"), fontFamily: n.css("fontFamily"), fontWeight: n.css("fontWeight"), letterSpacing: n.css("letterSpacing"), whiteSpace: "nowrap" }), d = t(this).attr("id") + "_autosize_tester"; !t("#" + d).length > 0 && (u.attr("id", d), u.appendTo("body")), n.data("minwidth", e), n.data("maxwidth", i), n.data("tester_id", d), n.css("width", e) }, t.fn.addTag = function (i, n) { return n = jQuery.extend({ focus: !1, callback: !0 }, n), this.each(function () { var u = t(this).attr("id"), d = t(this).val().split(a[u]); if ("" == d[0] && (d = new Array), i = jQuery.trim(i), n.unique) 1 == (o = t(this).tagExist(i)) && t("#" + u + "_tag").addClass("not_valid"); else var o = !1; if ("" != i && 1 != o) { if (t("<span>").addClass("tag").append(t("<span>").text(i).append("&nbsp;&nbsp;"), t("<a>", { href: "#", title: "Removing tag", text: "x" }).click(function () { return t("#" + u).removeTag(escape(i)) })).insertBefore("#" + u + "_addTag"), d.push(i), t("#" + u + "_tag").val(""), n.focus ? t("#" + u + "_tag").focus() : t("#" + u + "_tag").blur(), t.fn.tagsInput.updateTagsField(this, d), n.callback && e[u] && e[u].onAddTag) e[u].onAddTag.call(this, i); if (e[u] && e[u].onChange) { var r = d.length; e[u].onChange.call(this, t(this), d[r - 1]) } } }), !1 }, t.fn.removeTag = function (n) { return n = unescape(n), this.each(function () { var u = t(this).attr("id"), d = t(this).val().split(a[u]); for (t("#" + u + "_tagsinput .tag").remove(), str = "", i = 0; i < d.length; i++)d[i] != n && (str = str + a[u] + d[i]); (t.fn.tagsInput.importTags(this, str), e[u] && e[u].onRemoveTag) && e[u].onRemoveTag.call(this, n) }), !1 }, t.fn.tagExist = function (e) { var i = t(this).attr("id"), n = t(this).val().split(a[i]); return jQuery.inArray(e, n) >= 0 }, t.fn.importTags = function (a) { id = t(this).attr("id"), t("#" + id + "_tagsinput .tag").remove(), t.fn.tagsInput.importTags(this, a) }, t.fn.tagsInput = function (i) { var n = jQuery.extend({ interactive: !0, defaultText: "add a tag", minChars: 0, width: "300px", height: "100px", autocomplete: { selectFirst: !1 }, hide: !0, delimiter: ",", unique: !0, removeWithBackspace: !0, placeholderColor: "#666666", autosize: !0, comfortZone: 20, inputPadding: 12 }, i); return this.each(function () { n.hide && t(this).hide(); var i = t(this).attr("id"); i && !a[t(this).attr("id")] || (i = t(this).attr("id", "tags" + (new Date).getTime()).attr("id")); var u = jQuery.extend({ pid: i, real_input: "#" + i, holder: "#" + i + "_tagsinput", input_wrapper: "#" + i + "_addTag", fake_input: "#" + i + "_tag" }, n); a[i] = u.delimiter, (n.onAddTag || n.onRemoveTag || n.onChange) && (e[i] = new Array, e[i].onAddTag = n.onAddTag, e[i].onRemoveTag = n.onRemoveTag, e[i].onChange = n.onChange); var d = '<div id="' + i + '_tagsinput" class="tagsinput"><div id="' + i + '_addTag">'; if (n.interactive && (d = d + '<input id="' + i + '_tag" value="" data-default="' + n.defaultText + '" />'), t(d += '</div><div class="tags_clear"></div></div>').insertAfter(this), t(u.holder).css("width", n.width), t(u.holder).css("min-height", n.height), "" != t(u.real_input).val() && t.fn.tagsInput.importTags(t(u.real_input), t(u.real_input).val()), n.interactive) { if (t(u.fake_input).val(t(u.fake_input).attr("data-default")), t(u.fake_input).css("color", n.placeholderColor), t(u.fake_input).resetAutosize(n), t(u.holder).bind("click", u, function (a) { t(a.data.fake_input).focus() }), t(u.fake_input).bind("focus", u, function (a) { t(a.data.fake_input).val() == t(a.data.fake_input).attr("data-default") && t(a.data.fake_input).val(""), t(a.data.fake_input).css("color", "#000000") }), null != n.autocomplete_url) { for (attrname in autocomplete_options = { source: n.autocomplete_url }, n.autocomplete) autocomplete_options[attrname] = n.autocomplete[attrname]; void 0 !== jQuery.Autocompleter ? (t(u.fake_input).autocomplete(n.autocomplete_url, n.autocomplete), t(u.fake_input).bind("result", u, function (a, e, u) { e && t("#" + i).addTag(e[0] + "", { focus: !0, unique: n.unique }) })) : void 0 !== jQuery.ui.autocomplete && (t(u.fake_input).autocomplete(autocomplete_options), t(u.fake_input).bind("autocompleteselect", u, function (a, e) { return t(a.data.real_input).addTag(e.item.value, { focus: !0, unique: n.unique }), !1 })) } else t(u.fake_input).bind("blur", u, function (a) { var e = t(this).attr("data-default"); return "" != t(a.data.fake_input).val() && t(a.data.fake_input).val() != e ? a.data.minChars <= t(a.data.fake_input).val().length && (!a.data.maxChars || a.data.maxChars >= t(a.data.fake_input).val().length) && t(a.data.real_input).addTag(t(a.data.fake_input).val(), { focus: !0, unique: n.unique }) : (t(a.data.fake_input).val(t(a.data.fake_input).attr("data-default")), t(a.data.fake_input).css("color", n.placeholderColor)), !1 }); t(u.fake_input).bind("keypress", u, function (a) { if (a.which == a.data.delimiter.charCodeAt(0) || 13 == a.which) return a.preventDefault(), a.data.minChars <= t(a.data.fake_input).val().length && (!a.data.maxChars || a.data.maxChars >= t(a.data.fake_input).val().length) && t(a.data.real_input).addTag(t(a.data.fake_input).val(), { focus: !0, unique: n.unique }), t(a.data.fake_input).resetAutosize(n), !1; a.data.autosize && t(a.data.fake_input).doAutosize(n) }), u.removeWithBackspace && t(u.fake_input).bind("keydown", function (a) { if (8 == a.keyCode && "" == t(this).val()) { a.preventDefault(); var e = t(this).closest(".tagsinput").find(".tag:last").text(), i = t(this).attr("id").replace(/_tag$/, ""); e = e.replace(/[\s]+x$/, ""), t("#" + i).removeTag(escape(e)), t(this).trigger("focus") } }), t(u.fake_input).blur(), u.unique && t(u.fake_input).keydown(function (a) { (8 == a.keyCode || String.fromCharCode(a.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,\/]+/)) && t(this).removeClass("not_valid") }) } }), this }, t.fn.tagsInput.updateTagsField = function (e, i) { var n = t(e).attr("id"); t(e).val(i.join(a[n])) }, t.fn.tagsInput.importTags = function (n, u) { t(n).val(""); var d = t(n).attr("id"), o = u.split(a[d]); for (i = 0; i < o.length; i++)t(n).addTag(o[i], { focus: !1, callback: !1 }); e[d] && e[d].onChange && e[d].onChange.call(n, n, o[i]) } }(jQuery);